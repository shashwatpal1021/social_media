// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

// model User {
//   id              String                @id @default(uuid())
//   username        String
//   email           String                @unique
//   fullName        String?
//   avatar          String?
//   coverImage      String?
//   password        String
//   createdAt       DateTime              @default(now())
//   updatedAt       DateTime              @updatedAt   
// }


// model Post{
//   id              String                @id @default(uuid())
//   postFile        String
//   owner           User                  @relation(fields: [ownerId], references: [id])
//   ownerId         String
//   title           String
//   description     String
//   views           Int                   @default(0)
//   createdAt       DateTime              @default(now())
//   updatedAt       DateTime              @updatedAt
// }


// model Following{
//   id              String                @id @default(uuid())
//   user            User                  @relation(fields: [userId], references: [id])
//   followers       User[]                @relation(name: "Followers")
//   userId          String
//   createdAt       DateTime              @default(now())
//   updatedAt       DateTime              @updatedAt
// }

// model Tweets{
//   id              String                @id @default(uuid())
//   owner           User                  @relation(fields: [ownerId], references: [id])
//   ownerId         String
//   content         String
//   createdAt       DateTime              @default(now())
//   updatedAt       DateTime              @updatedAt
// }

// model Comment{
//   id              String                @id @default(uuid())
//   content         String  
//   post            Post                  @relation(fields: [postId], references: [id])
//   postId          String
//   owner           User                  @relation(fields: [ownerId], references: [id])
//   ownerId         String
//   createdAt       DateTime              @default(now())
//   updatedAt       DateTime              @updatedAt
// }

// model Like{
//   id              String       @id @default(uuid())
//   comment         Comment?     @relation(fields: [commentId], references: [id])
//   commentId       String?
//   post            Post?        @relation(fields: [postId], references: [id])
//   postId          String?
//   likeBy          User         @relation(fields: [likeById], references: [id])
//   likeById        String
//   tweet           Tweets?      @relation(fields: [tweetId], references: [id])
//   tweetId         String?
// }
